

services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    ports:
      - "${DATABASE_PORT}:5432"
    environment:
      POSTGRES_USER: ${USER_NAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: always

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    restart: always

  order-service:
    build: .
    container_name: order-service
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - .env
    depends_on:
      - postgres
      - kafka
    restart: always

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel verbose --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data


  order-generator:
    build: .
    container_name: order-generator
    command: [ "./send_orders" ]
    environment:
      KAFKA_BROKERS: kafka:29092
    depends_on:
      - kafka
    restart: "no"  # Запускается только когда нужно

volumes:
  pgdata:
  redis_data:
